const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkClassesWithMonitors() {
  try {
    // T√¨m c√°c l·ªõp c√≥ l·ªõp tr∆∞·ªüng
    const classes = await prisma.lop.findMany({
      where: {
        lop_truong: {
          not: null
        }
      },
      include: {
        lop_truong_rel: {
          include: {
            nguoi_dung: {
              include: {
                vai_tro: true
              }
            }
          }
        },
        _count: {
          select: {
            sinh_viens: true
          }
        }
      },
      take: 5
    });

    console.log('\n=== L·ªöP C√ì L·ªöP TR∆Ø·ªûNG ===\n');
    
    if (classes.length === 0) {
      console.log('Kh√¥ng t√¨m th·∫•y l·ªõp n√†o c√≥ l·ªõp tr∆∞·ªüng!');
      console.log('\nH√£y th·ª≠ g√°n l·ªõp tr∆∞·ªüng cho 1 l·ªõp b·∫±ng Prisma Studio (http://localhost:5555)');
    } else {
      classes.forEach((c, index) => {
        console.log(`${index + 1}. L·ªõp: ${c.ten_lop}`);
        console.log(`   M√£ l·ªõp: ${c.id}`);
        console.log(`   S·ªë sinh vi√™n: ${c._count.sinh_viens}`);
        console.log(`   L·ªõp tr∆∞·ªüng: ${c.lop_truong_rel?.nguoi_dung?.ho_ten || 'N/A'}`);
        console.log(`   Username: ${c.lop_truong_rel?.nguoi_dung?.ten_dn || 'N/A'}`);
        console.log(`   MSSV: ${c.lop_truong_rel?.mssv || 'N/A'}`);
        console.log(`   Password: Passw0rd! (m·∫∑c ƒë·ªãnh)\n`);
      });

      console.log('\nüìã H∆Ø·ªöNG D·∫™N TEST:');
      console.log('1. ƒêƒÉng nh·∫≠p v√†o http://localhost:3000');
      console.log('2. S·ª≠ d·ª•ng username v√† password ·ªü tr√™n');
      console.log('3. V√†o trang "T·ªïng quan" (Dashboard)');
      console.log('4. M·ªü Console (F12) ƒë·ªÉ xem logs verify d·ªØ li·ªáu');
      console.log('5. Ki·ªÉm tra xem dashboard ch·ªâ hi·ªÉn th·ªã sinh vi√™n c·ªßa l·ªõp ƒë√≥\n');
    }

  } catch (error) {
    console.error('L·ªói:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkClassesWithMonitors();
