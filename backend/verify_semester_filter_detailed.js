const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function verifySemesterFilterDetailed() {
  try {
    console.log('=========================================');
    console.log('KI·ªÇM TRA CHI TI·∫æT B·ªò L·ªåC H·ªåC K·ª≤');
    console.log('=========================================\n');

    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();
    
    // X√°c ƒë·ªãnh h·ªçc k·ª≥ hi·ªán t·∫°i
    let currentSemester, currentYearLabel;
    if (currentMonth >= 7 && currentMonth <= 11) {
      currentSemester = 'hoc_ky_1';
      currentYearLabel = currentYear.toString();
    } else if (currentMonth === 12) {
      currentSemester = 'hoc_ky_2';
      currentYearLabel = currentYear.toString();
    } else if (currentMonth >= 1 && currentMonth <= 4) {
      currentSemester = 'hoc_ky_2';
      currentYearLabel = (currentYear - 1).toString();
    } else {
      currentSemester = 'hoc_ky_1';
      currentYearLabel = currentYear.toString();
    }

    console.log(`üìÖ Ng√†y hi·ªán t·∫°i: ${currentDate.toLocaleDateString('vi-VN')}`);
    console.log(`üìÖ Th√°ng hi·ªán t·∫°i: ${currentMonth}`);
    console.log(`üìÖ NƒÉm hi·ªán t·∫°i: ${currentYear}`);
    console.log(`üìÖ H·ªçc k·ª≥ hi·ªán t·∫°i: HK${currentSemester === 'hoc_ky_1' ? '1' : '2'} nƒÉm ${currentYearLabel}`);
    console.log('\nüìä Logic ph√¢n lo·∫°i h·ªçc k·ª≥:');
    console.log('   - HK1: Th√°ng 7-11');
    console.log('   - HK2: Th√°ng 12-4');
    console.log('   - Ngh·ªâ: Th√°ng 5-6 (m·∫∑c ƒë·ªãnh HK1)\n');

    // L·∫•y m·ªôt sinh vi√™n ƒë·ªÉ test chi ti·∫øt
    const testStudent = await prisma.sinhVien.findFirst({
      where: {
        mssv: 'SV000013'
      },
      include: {
        lop: true,
        nguoi_dung: true
      }
    });

    if (!testStudent) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y sinh vi√™n SV000013');
      return;
    }

    console.log('==================================================');
    console.log(`üë§ SINH VI√äN TEST: ${testStudent.nguoi_dung.ho_ten} (${testStudent.mssv})`);
    console.log(`üìö L·ªõp: ${testStudent.lop.ten_lop}`);
    console.log('==================================================\n');

    // L·∫•y T·∫§T C·∫¢ ƒëƒÉng k√Ω c·ªßa sinh vi√™n
    const allRegistrations = await prisma.dangKyHoatDong.findMany({
      where: {
        sv_id: testStudent.id,
        trang_thai_dk: 'da_duyet'
      },
      include: {
        hoat_dong: true
      },
      orderBy: {
        ngay_dang_ky: 'desc'
      }
    });

    console.log(`üîç T·ªîNG S·ªê HO·∫†T ƒê·ªòNG ƒê√É DUY·ªÜT: ${allRegistrations.length}\n`);

    // Ph√¢n t√≠ch t·ª´ng ho·∫°t ƒë·ªông
    console.log('==================================================');
    console.log('PH√ÇN T√çCH CHI TI·∫æT T·ª™NG HO·∫†T ƒê·ªòNG');
    console.log('==================================================\n');

    const semesterGroups = {};
    let totalPoints = 0;

    for (let i = 0; i < allRegistrations.length; i++) {
      const reg = allRegistrations[i];
      const activity = reg.hoat_dong;
      const regDate = new Date(reg.ngay_dang_ky);
      const regMonth = regDate.getMonth() + 1;
      const regYear = regDate.getFullYear();

      console.log(`\nüìã Ho·∫°t ƒë·ªông ${i + 1}: ${activity.ten_hd}`);
      console.log(`   üìÖ Ng√†y ƒëƒÉng k√Ω: ${regDate.toLocaleDateString('vi-VN')} (Th√°ng ${regMonth}/${regYear})`);
      console.log(`   üíØ ƒêi·ªÉm: ${activity.diem_rl}`);
      console.log(`   üè∑Ô∏è  H·ªçc k·ª≥ trong DB: ${activity.hoc_ky}`);
      console.log(`   üìñ NƒÉm h·ªçc trong DB: ${activity.nam_hoc}`);

      // X√°c ƒë·ªãnh h·ªçc k·ª≥ d·ª±a tr√™n th√°ng ƒëƒÉng k√Ω
      let expectedSemester, expectedYear;
      if (regMonth >= 7 && regMonth <= 11) {
        expectedSemester = 'hoc_ky_1';
        expectedYear = regYear.toString();
      } else if (regMonth === 12) {
        expectedSemester = 'hoc_ky_2';
        expectedYear = regYear.toString();
      } else if (regMonth >= 1 && regMonth <= 4) {
        expectedSemester = 'hoc_ky_2';
        expectedYear = (regYear - 1).toString();
      } else { // Th√°ng 5-6
        expectedSemester = 'hoc_ky_1';
        expectedYear = regYear.toString();
      }

      console.log(`   üîç H·ªçc k·ª≥ ƒë∆∞·ª£c suy ra t·ª´ ng√†y: HK${expectedSemester === 'hoc_ky_1' ? '1' : '2'} nƒÉm ${expectedYear}`);

      // Ki·ªÉm tra match
      const semesterMatch = activity.hoc_ky === expectedSemester;
      const yearMatch = activity.nam_hoc.includes(expectedYear);

      console.log(`   ${semesterMatch ? '‚úÖ' : '‚ùå'} H·ªçc k·ª≥ kh·ªõp: ${activity.hoc_ky} ${semesterMatch ? '=' : '‚â†'} ${expectedSemester}`);
      console.log(`   ${yearMatch ? '‚úÖ' : '‚ö†Ô∏è'} NƒÉm h·ªçc kh·ªõp: ${activity.nam_hoc} ${yearMatch ? 'ch·ª©a' : 'KH√îNG ch·ª©a'} ${expectedYear}`);

      // Nh√≥m theo h·ªçc k·ª≥
      const semesterKey = `${expectedSemester === 'hoc_ky_1' ? 'HK1' : 'HK2'}-${expectedYear}`;
      if (!semesterGroups[semesterKey]) {
        semesterGroups[semesterKey] = {
          activities: [],
          totalPoints: 0,
          count: 0
        };
      }

      if (semesterMatch && yearMatch) {
        semesterGroups[semesterKey].activities.push(activity);
        semesterGroups[semesterKey].totalPoints += Number(activity.diem_rl);
        semesterGroups[semesterKey].count++;
        totalPoints += Number(activity.diem_rl);
        console.log(`   ‚úÖ ƒê∆Ø·ª¢C T√çNH V√ÄO: ${semesterKey}`);
      } else {
        console.log(`   ‚ö†Ô∏è  C·∫¢NH B√ÅO: D·ªØ li·ªáu kh√¥ng nh·∫•t qu√°n!`);
      }
    }

    // Th·ªëng k√™ theo h·ªçc k·ª≥
    console.log('\n\n==================================================');
    console.log('TH·ªêNG K√ä THEO H·ªåC K·ª≤');
    console.log('==================================================\n');

    const sortedSemesters = Object.keys(semesterGroups).sort().reverse();
    
    for (const semester of sortedSemesters) {
      const group = semesterGroups[semester];
      console.log(`üìä ${semester}:`);
      console.log(`   - S·ªë ho·∫°t ƒë·ªông: ${group.count}`);
      console.log(`   - T·ªïng ƒëi·ªÉm: ${group.totalPoints}`);
      console.log(`   - ƒêi·ªÉm trung b√¨nh: ${(group.totalPoints / group.count).toFixed(2)}`);
      
      if (group.count > 0) {
        console.log(`   - Top 3 ho·∫°t ƒë·ªông:`);
        group.activities.slice(0, 3).forEach((act, idx) => {
          console.log(`     ${idx + 1}. ${act.ten_hd} (${act.diem_rl} ƒëi·ªÉm)`);
        });
      }
      console.log();
    }

    // Test filter API cho h·ªçc k·ª≥ hi·ªán t·∫°i
    console.log('==================================================');
    console.log('TEST B·ªò L·ªåC API CHO H·ªåC K·ª≤ HI·ªÜN T·∫†I');
    console.log('==================================================\n');

    const filteredRegistrations = await prisma.dangKyHoatDong.findMany({
      where: {
        sv_id: testStudent.id,
        trang_thai_dk: 'da_duyet',
        hoat_dong: {
          hoc_ky: currentSemester,
          nam_hoc: {
            contains: currentYearLabel
          }
        }
      },
      include: {
        hoat_dong: true
      }
    });

    const filteredPoints = filteredRegistrations.reduce(
      (sum, reg) => sum + Number(reg.hoat_dong.diem_rl), 
      0
    );

    console.log(`üîç Filter: hoc_ky = '${currentSemester}' AND nam_hoc contains '${currentYearLabel}'`);
    console.log(`üìä K·∫øt qu·∫£:`);
    console.log(`   - S·ªë ho·∫°t ƒë·ªông: ${filteredRegistrations.length}`);
    console.log(`   - T·ªïng ƒëi·ªÉm: ${filteredPoints}`);
    console.log();

    if (filteredRegistrations.length > 0) {
      console.log(`Chi ti·∫øt ho·∫°t ƒë·ªông ƒë∆∞·ª£c l·ªçc:`);
      filteredRegistrations.forEach((reg, idx) => {
        const act = reg.hoat_dong;
        const regDate = new Date(reg.ngay_dang_ky);
        console.log(`${idx + 1}. ${act.ten_hd}`);
        console.log(`   ‚Üí ƒêi·ªÉm: ${act.diem_rl} | ${act.hoc_ky} | ${act.nam_hoc}`);
        console.log(`   ‚Üí Ng√†y: ${regDate.toLocaleDateString('vi-VN')}`);
      });
    }

    // So s√°nh v·ªõi d·ªØ li·ªáu th·ªëng k√™
    const currentSemesterKey = `HK${currentSemester === 'hoc_ky_1' ? '1' : '2'}-${currentYearLabel}`;
    const expectedData = semesterGroups[currentSemesterKey];

    console.log('\n==================================================');
    console.log('SO S√ÅNH K·∫æT QU·∫¢');
    console.log('==================================================\n');

    if (expectedData) {
      const countMatch = filteredRegistrations.length === expectedData.count;
      const pointsMatch = filteredPoints === expectedData.totalPoints;

      console.log(`üìä H·ªçc k·ª≥ hi·ªán t·∫°i (${currentSemesterKey}):`);
      console.log(`   S·ªë ho·∫°t ƒë·ªông: ${filteredRegistrations.length} vs ${expectedData.count} ${countMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`   T·ªïng ƒëi·ªÉm: ${filteredPoints} vs ${expectedData.totalPoints} ${pointsMatch ? '‚úÖ' : '‚ùå'}`);

      if (countMatch && pointsMatch) {
        console.log('\n‚úÖ B·ªò L·ªåC HO·∫†T ƒê·ªòNG CH√çNH X√ÅC!');
      } else {
        console.log('\n‚ö†Ô∏è  C·∫¢NH B√ÅO: C√≥ s·ª± kh√¥ng kh·ªõp gi·ªØa filter v√† th·ªëng k√™!');
      }
    } else {
      console.log(`‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu cho h·ªçc k·ª≥ hi·ªán t·∫°i: ${currentSemesterKey}`);
    }

    // Ki·ªÉm tra x·∫øp h·∫°ng
    console.log('\n==================================================');
    console.log('KI·ªÇM TRA X·∫æP H·∫†NG SINH VI√äN TRONG L·ªöP');
    console.log('==================================================\n');

    const allStudentsInClass = await prisma.sinhVien.findMany({
      where: {
        lop_id: testStudent.lop_id
      },
      include: {
        nguoi_dung: true,
        dang_ky_hd: {
          where: {
            trang_thai_dk: 'da_duyet',
            hoat_dong: {
              hoc_ky: currentSemester,
              nam_hoc: {
                contains: currentYearLabel
              }
            }
          },
          include: {
            hoat_dong: true
          }
        }
      }
    });

    const studentsWithPoints = allStudentsInClass.map(student => {
      const totalPoints = student.dang_ky_hd.reduce(
        (sum, reg) => sum + Number(reg.hoat_dong.diem_rl),
        0
      );
      const activitiesCount = student.dang_ky_hd.length;

      return {
        mssv: student.mssv,
        ho_ten: student.nguoi_dung.ho_ten,
        totalPoints,
        activitiesCount
      };
    });

    // S·∫Øp x·∫øp theo ƒëi·ªÉm gi·∫£m d·∫ßn
    studentsWithPoints.sort((a, b) => b.totalPoints - a.totalPoints);

    // G√°n x·∫øp h·∫°ng
    studentsWithPoints.forEach((student, index) => {
      student.rank = index + 1;
    });

    console.log(`üìö L·ªõp: ${testStudent.lop.ten_lop}`);
    console.log(`üë• T·ªïng s·ªë sinh vi√™n: ${studentsWithPoints.length}`);
    console.log(`üìÖ H·ªçc k·ª≥: HK${currentSemester === 'hoc_ky_1' ? '1' : '2'} nƒÉm ${currentYearLabel}\n`);

    console.log('Top 10 sinh vi√™n:');
    studentsWithPoints.slice(0, 10).forEach(student => {
      const isTestStudent = student.mssv === testStudent.mssv;
      const prefix = isTestStudent ? 'üëâ' : '  ';
      console.log(`${prefix} ${student.rank}. ${student.ho_ten} (${student.mssv})`);
      console.log(`     ƒêi·ªÉm: ${student.totalPoints} | Ho·∫°t ƒë·ªông: ${student.activitiesCount}`);
    });

    const testStudentRanking = studentsWithPoints.find(s => s.mssv === testStudent.mssv);
    if (testStudentRanking) {
      console.log(`\nüë§ X·∫øp h·∫°ng c·ªßa ${testStudent.nguoi_dung.ho_ten}:`);
      console.log(`   - Th·ª© h·∫°ng: ${testStudentRanking.rank}/${studentsWithPoints.length}`);
      console.log(`   - ƒêi·ªÉm: ${testStudentRanking.totalPoints}`);
      console.log(`   - S·ªë ho·∫°t ƒë·ªông: ${testStudentRanking.activitiesCount}`);
      
      if (testStudentRanking.totalPoints === filteredPoints) {
        console.log(`   ‚úÖ ƒêi·ªÉm kh·ªõp v·ªõi filter API!`);
      } else {
        console.log(`   ‚ùå ƒêi·ªÉm KH√îNG kh·ªõp: ${testStudentRanking.totalPoints} vs ${filteredPoints}`);
      }
    }

    console.log('\n==================================================');
    console.log('K·∫æT LU·∫¨N');
    console.log('==================================================\n');

    console.log('‚úÖ C√°c ƒëi·ªÉm ƒë√£ ki·ªÉm tra:');
    console.log('   1. Ph√¢n lo·∫°i h·ªçc k·ª≥ d·ª±a tr√™n th√°ng ƒëƒÉng k√Ω');
    console.log('   2. Filter API v·ªõi hoc_ky + nam_hoc');
    console.log('   3. T√≠nh t·ªïng ƒëi·ªÉm cho h·ªçc k·ª≥ hi·ªán t·∫°i');
    console.log('   4. X·∫øp h·∫°ng sinh vi√™n trong l·ªõp');
    console.log('   5. So s√°nh k·∫øt qu·∫£ filter v·ªõi th·ªëng k√™ th·ªß c√¥ng\n');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verifySemesterFilterDetailed();
