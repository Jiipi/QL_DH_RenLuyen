const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkUsersAndRoles() {
  console.log('=========================================');
  console.log('KI·ªÇM TRA USERS V√Ä VAI TR√í');
  console.log('=========================================\n');

  try {
    // 1. Ki·ªÉm tra c√°c vai tr√≤ c√≥ s·∫µn
    console.log('1. C√ÅC VAI TR√í TRONG H·ªÜ TH·ªêNG:');
    console.log('-----------------------------------------');
    const roles = await prisma.vaiTro.findMany({
      select: {
        id: true,
        ten_vt: true,
        mo_ta: true,
        _count: {
          select: {
            nguoi_dungs: true
          }
        }
      }
    });

    if (roles.length === 0) {
      console.log('‚ö†Ô∏è  KH√îNG C√ì VAI TR√í N√ÄO! C·∫ßn ch·∫°y seed.\n');
      return;
    }

    roles.forEach(role => {
      console.log(`\nüìã ${role.ten_vt}`);
      console.log(`   ID: ${role.id}`);
      console.log(`   M√¥ t·∫£: ${role.mo_ta || 'N/A'}`);
      console.log(`   S·ªë user: ${role._count.nguoi_dungs}`);
    });

    // 2. Ki·ªÉm tra users theo vai tr√≤
    console.log('\n\n2. USERS THEO VAI TR√í:');
    console.log('-----------------------------------------');
    
    const users = await prisma.nguoiDung.findMany({
      include: {
        vai_tro: true,
        sinh_vien: {
          include: {
            lop: {
              select: {
                ten_lop: true,
                khoa: true
              }
            }
          }
        }
      },
      orderBy: {
        vai_tro: {
          ten_vt: 'asc'
        }
      }
    });

    if (users.length === 0) {
      console.log('‚ö†Ô∏è  KH√îNG C√ì USER N√ÄO! C·∫ßn ch·∫°y seed.\n');
      return;
    }

    const usersByRole = users.reduce((acc, user) => {
      const roleName = user.vai_tro.ten_vt;
      if (!acc[roleName]) acc[roleName] = [];
      acc[roleName].push(user);
      return acc;
    }, {});

    Object.entries(usersByRole).forEach(([roleName, users]) => {
      console.log(`\nüìå ${roleName} (${users.length} users):`);
      users.forEach((user, idx) => {
        console.log(`   ${idx + 1}. ${user.ho_ten || user.ten_dn} (${user.email})`);
        console.log(`      User ID: ${user.id}`);
        if (user.sinh_vien) {
          console.log(`      ‚Üí Sinh vi√™n: ${user.sinh_vien.mssv}`);
          console.log(`      ‚Üí L·ªõp: ${user.sinh_vien.lop?.ten_lop || 'Ch∆∞a c√≥ l·ªõp'}`);
        } else if (roleName === 'LOP_TRUONG' || roleName === 'SINH_VI√äN') {
          console.log(`      ‚ö†Ô∏è  Ch∆∞a c√≥ b·∫£n ghi sinh_vien!`);
        }
      });
    });

    // 3. Ph√¢n t√≠ch v·∫•n ƒë·ªÅ
    console.log('\n\n3. PH√ÇN T√çCH:');
    console.log('-----------------------------------------');

    const lopTruongRole = roles.find(r => r.ten_vt === 'LOP_TRUONG');
    const sinhVienRole = roles.find(r => r.ten_vt === 'SINH_VI√äN');

    if (!lopTruongRole) {
      console.log('‚ùå Kh√¥ng c√≥ vai tr√≤ "LOP_TRUONG" trong h·ªá th·ªëng');
      console.log('   ‚Üí C·∫ßn ch·∫°y seed ho·∫∑c t·∫°o vai tr√≤ n√†y');
    } else if (lopTruongRole._count.nguoi_dungs === 0) {
      console.log('‚ö†Ô∏è  C√≥ vai tr√≤ "LOP_TRUONG" nh∆∞ng kh√¥ng c√≥ user n√†o');
      console.log('   ‚Üí C·∫ßn:');
      console.log('      1. T·∫°o user m·ªõi v·ªõi vai tr√≤ LOP_TRUONG');
      console.log('      2. Ho·∫∑c c·∫≠p nh·∫≠t vai tr√≤ c·ªßa user hi·ªán c√≥');
    } else {
      const lopTruongUsers = usersByRole['LOP_TRUONG'] || [];
      const usersWithoutSinhVien = lopTruongUsers.filter(u => !u.sinh_vien);
      
      if (usersWithoutSinhVien.length > 0) {
        console.log('‚ö†Ô∏è  C√≥ user LOP_TRUONG nh∆∞ng thi·∫øu b·∫£n ghi sinh_vien:');
        usersWithoutSinhVien.forEach(u => {
          console.log(`   - ${u.ho_ten || u.ten_dn} (${u.id})`);
        });
        console.log('   ‚Üí C·∫ßn t·∫°o b·∫£n ghi sinh_vien cho user n√†y');
      } else {
        console.log('‚úÖ C√≥ l·ªõp tr∆∞·ªüng v√† ƒë√£ c√≥ b·∫£n ghi sinh_vien');
      }
    }

    // 4. G·ª£i √Ω fix
    console.log('\n\n4. H∆Ø·ªöNG D·∫™N FIX:');
    console.log('-----------------------------------------');

    if (!lopTruongRole || lopTruongRole._count.nguoi_dungs === 0) {
      console.log('\nüìù C√°ch 1: Ch·∫°y seed ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u');
      console.log('   npm run seed');
      
      console.log('\nüìù C√°ch 2: C·∫≠p nh·∫≠t vai tr√≤ user hi·ªán c√≥');
      if (sinhVienRole && usersByRole['SINH_VI√äN']?.length > 0) {
        const sampleStudent = usersByRole['SINH_VI√äN'][0];
        console.log(`   UPDATE nguoi_dung SET vai_tro_id = '${lopTruongRole?.id}' WHERE id = '${sampleStudent.id}';`);
      }

      console.log('\nüìù C√°ch 3: T·∫°o user m·ªõi b·∫±ng API /auth/register');
    } else {
      const lopTruongUsers = usersByRole['LOP_TRUONG'] || [];
      const userWithSinhVien = lopTruongUsers.find(u => u.sinh_vien);
      
      if (userWithSinhVien) {
        console.log('\n‚úÖ H·ªá th·ªëng ƒë√£ c√≥ l·ªõp tr∆∞·ªüng ho√†n ch·ªânh!');
        console.log(`   User: ${userWithSinhVien.ho_ten}`);
        console.log(`   MSSV: ${userWithSinhVien.sinh_vien.mssv}`);
        console.log(`   L·ªõp: ${userWithSinhVien.sinh_vien.lop?.ten_lop}`);
        console.log('\n   ƒê·ªÉ test:');
        console.log(`   1. ƒêƒÉng nh·∫≠p v·ªõi: ${userWithSinhVien.email}`);
        console.log(`   2. Truy c·∫≠p: http://localhost:3000/monitor/approvals`);
      }
    }

    console.log('\n\n=========================================');
    console.log('K·∫æT TH√öC KI·ªÇM TRA');
    console.log('=========================================\n');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUsersAndRoles();
